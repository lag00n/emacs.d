#+TITLE: My emacs config, written in org.
#+PROPERTY: header-args:elisp :tangle ./init.el :results none
#+STARTUP: overview
* Welcome to my config!
That's my emacs config, written in org. This file generates [[file:init.el][init.el]] which will be loaded by emacs at startup.
Whitout futher ado, let's get started!
Still is a wip, so, stuff can be updated anytime.

* Startup Performance

#+begin_src elisp
;; This file was generated my config.org. If you're using this, please go modify it

;; default is 800 kilobytes. Measured in bytes.
(setq gc-cons-threshold most-positive-fixnum
			gc-cons-percentage 0.6)

(add-hook 'emacs-startup-hook
		  #'(lambda () (setq gc-cons-threshold (* 50 1000 1000))))

;; Defer loading most packages for quickier startup times
(setq use-package-always-defer t)
#+end_src

* Some optimizations
#+begin_src elisp
(setq idle-update-delay 1.0)
(setq highlight-nonselected-windows nil)
(setq fast-but-imprecise-scrolling t)
(setq inhibit-compacting-font-caches t)
#+end_src 
* Native compilation

#+begin_src elisp
(setq package-native-compile t
			native-comp-deferred-compilation t)

(setq native-comp-eln-load-path
			(list (expand-file-name "eln-cache" user-emacs-directory)))
#+end_src

* Package system setup
Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull doun your configuration.
Because of that, I'll be using [[https://github.com/jwiegley/use-package][use-package]] to ease that process

*NOTE:* Currently disabled because I'm trying out [[https://github.com/raxod502/straight.el][straight.el]] as an alternative.

#+begin_src elisp :tangle no
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
		 ("org" . "https://orgmode.org/elpa/")
		 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; install use-package if not installed yet 
;; (unless (package-installed-p 'use-package)
;;	(package-install 'use-package))

;; Initialize use-package
;; (require 'use-package)
;; (setq use-package-always-ensure t)
#+end_src

* Straight.el
Straight.el is a simple yet powerfull alternative to package.el, which I'm currently trying out.

#+begin_src elisp
(unless (featurep 'straight)
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
		 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
		(bootstrap-version 5))
	(unless (file-exists-p bootstrap-file)
	  (with-current-buffer
		  (url-retrieve-synchronously
		   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
		   'silent 'inhibit-cookies)
		(goto-char (point-max))
		(eval-print-last-sexp)))
	(load bootstrap-file nil 'nomessage)))

;; Use straight.el for use-package expressions
(straight-use-package 'use-package)

;; Disabling package.el completely
(setq package-enable-at-startup nil)
#+end_src

** Configuring use-package + straight.el

#+begin_src elisp
(setq straight-use-package-by-default t)
#+end_src			 

* Automatic Package Updates
The auto-package-update package helps us keep our Emacs packages always up to date. After a certain number of days, it will prompt you to remind you to update your packages.

 You can also use =M-x auto-package-update-now= to update at any time.

 #+begin_src elisp
 (use-package auto-package-update
   :straight t
   :custom
   (auto-package-update-interval 7)
   (auto-package-update-prompt-before-update t)
   (auto-package-update-hide-results t)
   (auto-package-update-delete-old-versions t)
   :config
   (auto-package-update-maybe)
   (auto-package-update-at-time "12:35"))
 #+end_src

* Indentation

#+begin_src elisp
(setq-default tab-width 4)
(setq-default standard-indent 4)
(setq c-basic-offset tab-width)
(setq-default eletric-indent-inhibit t)
(setq-default indent-tabs-mode t)
(setq backward-delete-char-untabify-method 'nil)
#+end_src

* Bracket pair-matching

#+begin_src elisp
(setq eletric-pair-pairs '(
						   (?\{ . ?\})
						   (?\( . ?\))
						   (?\[ . ?\])
						   (?\" . ?\")
						   ))
(electric-pair-mode t)
#+end_src

* Which-key
Which key helps a lot to remember some keybindings, so I'm going to add it here.
#+begin_src elisp
(use-package which-key
  :init (which-key-mode))
#+end_src
* Some cool snippets
Ima go try testing YASnippet for having some cool snippets in emacs.
Might disable it later if I doesn't like it.

#+begin_src elisp
(use-package yasnippet
  :demand
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-global-mode 1))
#+end_src
* Clipboard fix

#+begin_src elisp
(setq x-select-enable-clipboard t) 
#+end_src
* zoom setup ( to use with certain fonts only, envypn doesn't support this well)

#+begin_src elisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* Ace-window for window switching


#+begin_src elisp
(use-package ace-window
  :custom-face
  (aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 1.5))))
  :init (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l) ;; switching keys to home row
			  aw-char-position 'left
			  aw-dispatch-always t
			  aw-ignore-current nil
			  aw-leading-char-style 'char
			  aw-scope 'frame)
  :bind (("M-o" . ace-window)
		 ("M-O" . ace-swap-window)))
#+end_src

* God-mode
I'm currently trying out god-mode for reducing modifiers usage. Seems good, but I still don't know if I'll let it here.
#+BEGIN_SRC elisp
(use-package god-mode
  :demand
  :bind (("<escape>". god-local-mode)
		 ("C-x C-1" . delete-other-windows)
		 ("C-x C-2" . split-and-follow-vertically) ;; Function created by me on topic above.
		 ("C-x C-3" . split-and-follow-horizontally) ;; Same thing
		 ("C-x C-0" . delete-window)
		 ("C-r" . lx-jump-and-godexit)
		 ("C-x np" . dired)
		 :map god-local-mode-map
		 ("," . repeat)
		 ("." . backward-word) ;; Go to previous word start.
		 (";" . forward-to-word) ;; Go to next word start.
		 ("u" . undo)
		 ("[" . backward-paragraph)
		 ("]" . forward-paragraph)
		 ("V" . scroll-down))
  :config
  (add-hook 'post-command-hook #'lxmacs-god-mode-update-cursor-type)
  (setq god-exempt-predicate (lambda () (not (equal (this-command-keys) "q"))))
  (god-mode))
#+END_SRC
** God-mode box/bar cursor function

This function turns the box cursor in a bar when god-mode is disabled
(and typing is active). This function is called in a hook on =:config=
section of god-mode package above.

#+BEGIN_SRC elisp
(defun lxmacs-god-mode-update-cursor-type ()
  "Update cursor color based on whether god-mode is active or not."
  (set-cursor-color (if (or god-local-mode buffer-read-only) "#0f0908" "#ff7477")))
#+END_SRC

* Creating a new window switches the focus to it

#+begin_src elisp
(defun lx-split-and-follow-horizontally ()
  "Create a new horizontal split and focus it."
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
;;(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun lx-split-and-follow-vertically ()
  "Create a new vertical split and focus it."
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
;;(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

* Alias yes-or-no questions to y-or-n

#+begin_src elisp
(setq use-short-answers t)
#+end_src

* Ease window resizing
This binds it to Super-Control-<arrow>.

#+begin_src elisp
(global-set-key (kbd "s-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "s-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "s-C-<down>") 'shrink-window)
(global-set-key (kbd "s-C-<up>") 'enlarge-window)
#+end_src

* Highlight current line

#+begin_src elisp
(global-hl-line-mode t)
#+end_src

* Disable auto-save and backup files

#+begin_src elisp
(setq make-backup-files nil)
(setq auto-save-default nil)
(if (eq system-type 'windows-nt)
	(setq user-emacs-directory (expand-file-name "C:/Users/meninos/AppData/Roaming/.emacs.d/miscfolders"))
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs")))

(setq url-history-file (expand-file-name "url/history" user-emacs-directory))
#+END_SRC

** TODO Use no-littering to automatically set common paths to the new user-emacs-directory
Still gotta configurate that.
#+BEGIN_SRC elisp :tangle no
(use-package no-littering)
#+END_SRC

** Keep customization settings in a temporary file (taken from Ambrevar!)

#+BEGIN_SRC elisp :tangle no
(setq custom-file
	  (if (boundp 'server-socket-dir)
		  (expand-file-name "custom.el" server-socket-dir)
		(expand-file-name (format "emacs-custom-%s.el" (user-vid)) temporary-file-directory)))
(load custom-file t)
#+END_SRC

* UI configuration and some minibuffer and quality-of-life packages.
Just configuring basic UI settings, to make Emacs look a lot more minimal. Basically, I'm "ricing" emacs here.

 #+begin_src elisp
 (scroll-bar-mode -1) ;; disable visible scrollbar
 (tool-bar-mode -1) ;; disable toolbar
 (tooltip-mode -1) ;; disable tooltips
 (menu-bar-mode -1) ;; disable menubar
 (set-fringe-mode 10) ;; give some breathing room
 (blink-cursor-mode 0) ;; disable cursor blinking (annoying)

 ;; visual bell setup
 (setq visible-bell t)

 (column-number-mode 1)
 (global-display-line-numbers-mode t)
 (setq display-line-numbers-type 'relative)

 ;; Disable line numbers for some modes
 (dolist (mode '(org-mode-hook
                 term-mode-hook
                 shell-mode-hook
                 treemacs-mode-hook
                 eshell-mode-hook))
   (add-hook mode (lambda () (display-line-numbers-mode 0))))

 ;; show parent parentheses
 (show-paren-mode 1)

 ;; Set inicial path so It works on multiplatforms
 (setq inicial-directory "~/")

 ;; Delete selected region when input
 (delete-selection-mode 1)
 #+end_src

** Dashboard configuration

*IMPORTANT:* always remember to install =all-the-icons=, or dashboard buffer will crash :D.

#+BEGIN_SRC elisp
(use-package dashboard
  :after page-break-lines
  :config
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))
		dashboard-page-separator "\n\f\n"
		dashboard-banner-logo-title "Hello, lxg00n! Have a good coding session!"
		dashboard-startup-banner "~/.emacs.d/dashboardimg/Sakuya.png"
		dashboard-set-footer nil
		dashboard-center-content t
		dashboard-set-heading-icons t
		dashboard-set-file-icons t
		dashboard-week-agenda t
		dashboard-filter-agenda-entry 'dashboard-no-filter-agenda
		dashboard-items '((recents . 5)(bookmarks . 5)(agenda . 5)))
  (dashboard-setup-startup-hook))
#+END_SRC

*** Installing all-the-icons (dashboard dep)

#+begin_src elisp
(use-package all-the-icons)
#+end_src

*** Installing page-break-lines (dashboard dep too)

#+begin_src elisp
(use-package page-break-lines
  :demand)
#+end_src
** Font configuration

#+begin_src elisp
(defun lxgmacs/set-font-faces ()
  (message "Setting Faces.")
  (set-face-attribute 'default nil :font "Cascadia Code PL Cursive-12")
  (set-fontset-font t 'symbol "Symbola" nil))

(if (daemonp)
	(add-hook 'after-make-frame-functions
			  (lambda (frame)
				(with-selected-frame frame
				  (lxgmacs/set-font-faces))))
  (lxgmacs/set-font-faces))
#+end_src

*** Font-lock settings
Here I'm just making all comments in code display bold and italic. If the font has it, I like to keep comments cursive too. Easy and cool.
*IMPORTANT: by default, this font =Cascadia Code Cursive= doesn't exists. It's a patched version made by me using [[https://github.com/twardoch/fonttools-opentype-feature-freezer/][fonttools-opentype-feature-freeze]] because, as most applications,
Emacs still doesn't support some OpenType features like stylistic sets (or style sets) that are used by Cascadia to alternate between normal Italic and Cursive.*
That isn't the best approach but until Emacs doesn't support this natively, it's a good approach.

#+begin_src elisp
(custom-set-faces
 '(font-lock-comment-face ((t (:font "Cascadia Code PL Cursive-12" :italic t :bold t)))))
#+end_src

** Doom-themes

Disabled because I'm actually usign my own colorscheme, based on vim-mellow.

#+begin_src elisp :tangle no
(use-package doom-themes
  :straight t 
  :config
  (setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
  (load-theme 'doom-wilmersdorf t)
#+end_src

** Creating my own theme using autothemer

Autothemer is a emacs utility package that allows you to create your own theme
in a "easy" and simple way. I'll be testing it.

#+begin_src elisp
(use-package autothemer
	:init
	(load-theme 'mellow-light t))
#+end_src

** Prettify symbols mode

#+begin_src elisp
(defun my/org-mode/load-prettify-symbols ()
  (interactive)
  (setq prettify-symbols-alist
		(mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
				'(("#+begin_src" . ?)
				  ("#+end_src" . ?))))
		(global-prettify-symbols-mode t))

(add-hook 'org-mode-hook 'my/org-mode/load-prettify-symbols)

(global-prettify-symbols-mode t)
#+end_src

** Rainbow Delimiters

#+begin_src elisp
(use-package rainbow-delimiters
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** Rainbow mode
#+begin_src elisp
(use-package rainbow-mode)
#+end_src

** Bespoke-modeline 

Bespoke modeline is a simple, yet beautiful modeline for emacs, based on nano-emacs modeline. 
*Currently disabled for lambda-modeline*

#+begin_src elisp :tangle no
(use-package bespoke-modeline
  :demand
  :straight (:type git :host github :repo "mclear-tools/bespoke-modeline")
  :hook (after-init . bespoke-modeline-mode)
  :init
  ;; Set header line (modeline on top)
  (setq bespoke-modeline-position 'top)
  ;; Modeline height
  (setq bespoke-modeline-size 10)
  ;; Modeline spacing
  (setq bespoke-modeline-space-bottom -2)
  ;; Use visual bell
  (setq bespoke-modeline-visual-bell t)
  :config
  (bespoke-modeline-mode))

#+end_src

** Lambda-line

Lambda-line is a simple and pretty modeline for emacs. It has strong design inspiration from bespoke-modeline.

#+begin_src elisp
(use-package lambda-line
	:demand
	:straight (:type git :host github :repo "lambda-emacs/lambda-line")
	:custom
	(lambda-line-icon-time t)
	(lambda-line-icon-time nil)
	(lambda-line-clockface-update-fontset "ClockFaceRect")
	(lambda-line-position 'bottom) ;; Set modeline position
	(lambda-line-abbrev t) ;; Abbreviate or not major modes
	(lambda-line-hspace " ") ;; Add some cushion
	(lambda-line-prefix t) ;; Use a prefix symbol
	(lambda-line-prefix-padding t) ;; A little spacing? Yes please
	(lambda-line-status-invert nil) ;; No invert colors
	(lambda-line-space-top +.30) ;; Padding on top and bottom of modeline
	(lambda-line-space-bottom -.30)
	(lambda-line-symbol-position 0.1) ;; Adjust the vertical placement of symbol
	:config
	;; activate lambda-line
	(lambda-line-mode)
	;; set divider line in footer
	(when (eq lambda-line-position 'top)
		(setq-default mode-line-format (list "%_"))
		(setq mode-line-format (list "%_"))))
#+end_src

*** Function to toggle lambda-line's position
With this function, you can set a binding or just invoke it using =M-x= to change lambda-line's position between top and bottom.
#+BEGIN_SRC elisp
(defun lx-toggle-lambdaline-position ()
  "Toggle lambda-line's position between 'top and 'bottom based on actual value"
  (interactive)
  (setq lambda-line-position
		(if (eq lambda-line-position 'top)
			'bottom
		'top))
  (message "Changing Lambda-line's position to: %S" lambda-line-position)
  (lambda-line-mode 'toggle) ;; Running it two times to refresh lambda-line's position correctly. It's a temporary workaround, gotta find a better option to achieve this.
  (lambda-line-mode 'toggle))
#+END_SRC
*** Fixing lambda-modeline font

With this, we're going to make sure that bespoke-modeline is using the correct font to display glyphs and stuff. *Currently disabled bc
I already fixed that. 

#+begin_src elisp :tangle no
(use-package fontset
  :straight (:type built-in) ;; only needed if you use straight.el
  :config
  ;; Use symbola for proper unicode
  (when (member "Symbola" (font-family-list))
	(set-fontset-font
	t 'symbol "Symbola" nil)))
#+end_src

** DONE Configure Ivy + Counsel
For some reasons, I'm trying to change from Ivy+Counsel+Swiper to vertico, because
it seems a better option at the moment (and a faster one too).
CLOSED: [2021-05-16 dom 00:00]

#+begin_src elisp :tangle no
(use-package ivy
  ;; :diminish
  :demand
  :bind ("C-s" . swiper)
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :demand
  :after counsel
  :config
  (ivy-rich-mode 1))

(use-package counsel
  :demand
  :bind (("C-M-j" . 'counsel-switch-buffer)
		 :map minibuffer-local-map
		 ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))
#+end_src

** Vertico
#+BEGIN_SRC elisp
(defun lx-minibuffer-backward-kill (arg)
  "When minibuffer is completing a file name delete up to parent folder,
otherwise delete a word"
  (interactive "p")
  (if minibuffer-completing-file-name
	  (if (string-match-p "/." (minibuffer-contents))
		  (zap-up-to-char (- arg) ?/)
		(delete-minibuffer-contents))
	(backward-kill-word arg)))

(use-package vertico
  :straight (vertico :files (:defaults "extensions/*")
					 :includes(vertico-indexed
							   vertico-flat
							   vertico-grid
							   vertico-mouse
							   vertico-quick
							   vertico-buffer
							   vertico-repeat
							   vertico-reverse
							   vertico-directory
							   vertico-multiform
							   vertico-unobtrusive
							   ))
  :demand
  :init
  (vertico-mode)
  :custom
  (vertico-cycle t)
  :config
  (setq vertico-resize t
		vertico-count 8)
  (vertico-multiform-mode)
  :bind(:map vertico-map
			 ("C-j" . vertico-next)
			 ("C-k" . vertico-previous)
			 ("C-f" . vertico-exit)
        :map minibuffer-local-map
			 ("M-h" . lx-minibuffer-backward-kill)))

(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
		completion-category-defaults nil
		completion-category-overrides '((file (styles partial-completion))))
  :custom
  (orderless-matching-styles
   '(orderless-literal
	 orderless-prefixes
	 orderless-flex
	 orderless-initialism)))
;;	 orderless-regexp

(use-package marginalia
  :after vertico
  :init
  (marginalia-mode)
  :config
  (setq marginalia-annotators '(marginalia-annotators-heavy))
  :custom-face
  (marginalia-documentation ((t (:italic t)))))

(use-package consult
  :bind (("M-y" . consult-yank-pop)
		 ("C-s" . consult-line)
		 ("C-c h" . consult-history)
		 ("C-c b" . consult-bookmark)
		 ("C-c k" . consult-kmacro)
		 ("C-c m" . consult-mark)
		 ("C-c M" . consult-global-mark)
		 ("C-c M-:" . consult-complex-command)
		 ("C-c i" . consult-imenu)
		 ("C-c y" . consult-yank-replace)
		 ("C-x b" . consult-buffer)
		 ("C-x c e" . consult-compile-error)
		 :map minibuffer-local-map
		 ("C-r" . consult-history))
  :custom
  (completion-in-region-function #'consult-completion-in-region)
  :config
  (consult-preview-at-point-mode))
#+END_SRC

** In-buffer completion with *corfu*
I'm actually using corfu for some nice in-buffer completion popups.
#+BEGIN_SRC elisp
(use-package corfu
  ;; Adding some corfu extensions to the base corfu
  :straight (:files (:defaults "extensions/*")
					:includes (corfu-popupinfo))
  :hook
  ((prog-mode-hook . corfu-mode)
   (corfu-mode-hook . corfu-popupinfo-mode)))
  :custom
  (corfu-preview-current nil)
  (corfu-separator ?\s)
  (corfu-cycle t)
  (corfu-compact t)
  (corfu-quit-at-boundary 'separator)
  (corfu-quit-no-match t)
  (corfu-minimum-prefix-lenght 2)
  (corfu-echo-documentation t)
  (corfu-echo-delay 0.2)
  (corfu-quit-no-match t)
  (corfu-preselect-first nil)
  (corfu-auto t)
  (corfu-auto-prefix 2)
  (corfu-popupinfo-hide t)
  (corfu-popupinfo-resize t)
  (corfu-popupinfo-delay .5)
  (corfu-popupinfo-direction 'vertical)
  :bind(:map corfu-map
			 ("M-SPC" . corfu-insert-separator)
			 ("TAB" . corfu-next)
			 ("[tab]" . corfu-next)
			 ("[backtab]" . corfu-previous)
			 ("S-TAB" . corfu-previous)
			 ("S-<return>" . corfu-insert))
#+END_SRC
*** Add Corfu-doc for some lil nice documentation
Disabled because =corfu-doc= is actually deprecated.
#+BEGIN_SRC elisp :tangle no
(use-package corfu-doc
  :after corfu
  :hook (corfu-mode . corfu-doc-mode)
  :bind(:map corfu-map
			 ("M-n" . corfu-doc-scroll-up)
			 ("M-p" . corfu-doc-scroll-down))
  :custom
  (corfu-doc-delay 0.5)
  (corfu-doc-max-width 70)
  (corfu-doc-max-height 20))
#+END_SRC
*** Use Cape with Corfu!
#+BEGIN_SRC elisp
(use-package cape
  :bind(("C-c p p" . completion-at-point)
		("C-c p d" . cape-dabbrev)
		("C-c p f" . cape-file)
		("C-c p l" . cape-line))
  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-line)
  (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster))
#+END_SRC

* Eshell
** Eshell toggle package
Package to toggle eshell on a screen side.
#+begin_src elisp
(use-package eshell-toggle
		:demand
		:straight (:type git :host github :repo "4DA/eshell-toggle")
		:bind
		("C-c e" . eshell-toggle))
#+end_src
* Org mode configuration
** Demanding org-mode
#+BEGIN_SRC elisp
(use-package org)
#+END_SRC
** First, installing org +bullets+ superstar

I've switched from org-bullets to org-superstar since they're pretty
similar and org-superstar offers more options.

#+begin_src elisp
(use-package org-superstar)
#+end_src

** Binding org-toggle-narrow-to-subtree

I'm changing the bindings =C-x n s (org-narrow-to-subtree)= and =C-x n w (widen)= to a simple
function that does the same thing: _"focus/zoom" into a specific header and it's subtree_.

#+BEGIN_SRC elisp
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-x n s") #'org-toggle-narrow-to-subtree))
#+END_SRC

** Org hooks

#+begin_src elisp
(add-hook 'org-mode-hook (lambda ()
			 (org-superstar-mode 1)
			 (setq org-startup-folded t)
			 (org-toggle-inline-images)
			 (org-indent-mode)))
#+end_src

** Ox-jekyll-md ( for blog posts )

#+begin_src elisp
(use-package ox-jekyll-md
  :init
  (setq org-jekyll-md-include-yaml-front-matter nil
	  org-jekyll-md-use-todays-date nil))
#+end_src

** Org-Agenda

#+begin_src elisp
(setq org-log-done t)

(if (eq system-type 'windows-nt)
	(setq org-agenda-files '("c:/Users/meninos/Documents/Files/org_agenda"))
  (setq org-agenda-files '("~/.emacs.d/agenda")))

(setq org-lowest-priority ?F ;; Set lowest priority level for TODO's
	  org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d)")
						  (sequence "READ(r)" "|" "READEN(.)")
						  (sequence "SHOP(s)" "|" "BOUGHT(b)")
						  (sequence "PROJ(p)" "|" "FINISHED(f)")
						  (sequence "|" "CANCELED(c)")))
(global-set-key (kbd "C-c a") 'org-agenda)
#+end_src

** Syntax highlightening and stuff inside org source blocks

#+begin_src elisp
(setq org-src-fontify-natively t
	  org-src-tab-acts-natively t
	  org-confirm-babel-evaluate nil
	  org-edit-src-content-indentation 0)
#+end_src

** Blog project org-setup

#+begin_src elisp
(setq org-publish-project-alist
	  '(
	  ("lag00n.github.io"
	   ;; path to org files
	   :base-directory "~/github/lag00n.github.io/_org"
	   :base-extension "org"
	   ;; path to jekyll posts
	   :publishing-directory "~/github/lag00n.github.io/_cool_posts"
	   :recursive t
	   :publishing-function org-jekyll-md-publish-to-md
	   :toc nil
	   )))
#+end_src

** Org mode screenshot

A hack that allow to paste images from clipboard into org files.

#+begin_src elisp
(defun my-org-screenshot ()
  "Take a screenshot into a time stamped unique-named
file in the same directory as the org-buffer and insert a link to this file."
  (interactive)
  (setq filename
		(concat
		 (make-temp-name
		  (concat (buffer-file-name)
				  "_"
				  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  (call-process "import" nil nil nil filename)
  (insert (concat "[[" filename "]]"))
  (org-display-inline-images))
#+end_src

* Rss with elfeed
Elfeed is a awesome RSS feed reader for emacs. I mainly use it to keep track of some subreddits.

#+begin_src elisp
(use-package elfeed
  :config
  (setq elfeed-feeds
		'("https://www.reddit.com/r/emacs/.rss"
		  "https://www.reddit.com/r/unixporn/new/.rss?sort=new")
		elfeed-use-curl t))
#+end_src

* Some misc stuff
** Try package
Try is a simple package which evaluates the contents of a link to a elisp file or alternatively
to a MELPA/ELPA package. It allows one to try packages without having to actually install them, without byte-compiling and stuff.
The package itself has around 90 lines with a lot of commands, so its good to have on any workflow.
#+BEGIN_SRC elisp
(use-package try
  :defer t)
#+END_SRC
** Re-source init.el easily
This is a simple function that just re-sources =init.el=. Made for lazyness.
#+BEGIN_SRC elisp
(defun lx-resource-initel ()
  (interactive)
  (load-file user-init-file))
#+END_SRC
** Lua mode
#+begin_src elisp
(use-package lua-mode)
#+end_src
** Select line function
Here's a simple function, inspired by Xah Lee's one, that selects the entire line.
#+BEGIN_SRC elisp
(defun lx-select-line ()
  "Selects the current line. It's a good idea to bind it to some keybind."
  (interactive)
  ;; If region is already active
  (if (region-active-p)
	  (if visual-line-mode
		  (let ((xp1 (point)))
			(end-of-visual-line 1)
			(when (eq xp1 (point))
			  (end-of-visual-line 2)))
		(progn
		  (forward-line 1)
		  (end-of-line)))
	(if visual-line-mode
		(progn (beginning-of-visual-line)
			   (push-mark (point) t t)
			   (end-of-visual-line))
	  (progn
		(push-mark (line-beginning-position) t t)
		(end-of-line)))))
#+END_SRC

*** Binding it to =C-c l=
#+BEGIN_SRC elisp
(global-set-key (kbd "C-c l") 'lx-select-line)
#+END_SRC

** Creating my own prefix
Here I'm creating my own prefix to emacs so I can bind some functions of mine and work with god-mode.
That's why the prefix is =C-x C-d=, because I think It will be good to just press =x d= using god-mode.
#+BEGIN_SRC elisp
(define-prefix-command 'lx-prefix-keymap)
(global-set-key (kbd "C-x C-d") 'lx-prefix-keymap)
#+END_SRC
** Golang env configuration
#+BEGIN_SRC elisp :tangle no
(use-package go-mode
  :ensure t)

;; (defun lx-go-mode-hook ()
;;   ; Use goimports instead of go-fmt
;;   (setq gofmt-command "goimports")
;;   ; Call Gofmt before saving
;;   (add-hook 'before-save-hook 'gofmt-before-save)
;;   ; Customize compile command to run go build
;;   (if (not (string-match "go" compile-command))
;;       (set (make-local-variable 'compile-command)
;;            "go run"))
;;   )
;; (add-hook 'go-mode-hook 'lx-go-mode-hook)
#+END_SRC

Trying currently eglot + gopls
#+BEGIN_SRC elisp
;; Configure eglot to recognize gopls. Since it's my first experience with LSP, I'll leave it here.
;; If I like it, I might move it to a proper location to integrate other languages.
(use-package eglot
  :ensure t
  :config
  (add-to-list 'eglot-server-programs '(go-mode . ("gopls"))))

(use-package go-mode
  :ensure t
  :hook
  (go-mode . eglot-ensure))
#+END_SRC
** Automatically clean whitespace
This will remove any trailing whitespaces on file save. Definetely good to have.
#+BEGIN_SRC elisp
(use-package ws-butler
  ;; Activate on text and programming modes.
  :hook ((text-mode . ws-butler-mode)
		 (prog-mode . ws-butler-mode)))
#+END_SRC
** Avy to jump around
Avy is a super-cool package that allows you to jump around your buffer.
It has a lot of cool features, but here I'm using =avy-goto-{line, char, word}=
which, as the name says, jumps between lines, chars and words.
Might bind some other cool functions that Avy provides later.
#+BEGIN_SRC elisp
(use-package avy
  :commands(avy-goto-char-timer avy-goto-word-1 avy-goto-line)
  :bind(("C-c f c" . avy-goto-char-timer)
		("M-g g" . avy-goto-line)
		("C-c f w" . avy-goto-word-1)
		("C-c f i" . lx-jump-and-godexit)))
#+END_SRC
*** Function for selecting word/char and deactivating godmode to write.
As the function description says... It jumps for a word or character using
=avy-goto-char-timer= and after that moves the cursor for the end of the desired
selection and deactivates god-mode, so you can start typing.
#+BEGIN_SRC elisp
(defun lx-jump-and-godexit ()
  "Jump to word or char with avy, puts the cursor after the word/char
and deactivates godmode in order to type."
  (interactive)
  (avy-goto-char-timer)
  (forward-word)
  (when (bound-and-true-p god-local-mode)
	(god-local-mode -1))) ;; Deactivate godmode if its active
#+END_SRC
** TODO Configure multi-cursors-package.
I plan into adding [[https://github.com/magnars/multiple-cursors.el][magnars/multiple-cursors.el]] into my config. But, I'm kinda lazy so
I guess that to do that later.
* Mail setup with mu4e

Mail setup using mu4e.

#+begin_src elisp :tangle no
(add-to-list 'load-path "~/.local/share/emacs/site-lisp/mu4e")
(require 'mu4e)
;;(require 'smtpmail)
(setq user-mail-address "lxg00n@paranoid.email"
	  user-full-name "lxg00n"
	  ;; mbsync command to update mail
	  mu4e-get-email-command "mbsync -c ~/.config/mbsync/.mbsyncrc -a"
	  mu4e-update-interval 300
	  send-mail-function 'smtpmail-send-it
	  smtpmail-smtp-server "smtp.paranoid.email"
	  smtpmail-smtp-service "25"
	  smtpmail-stream-type 'starttls
	  mu4e-sent-folder "/lxg00n-paranoid/Sent"
	  mu4e-drafts-folder "/lxg00n-paranoid/Drafts"
	  mu4e-trash-folder "/lxg00n-paranoid/Trash"
	  mu4e-decryption-policy 'ask
	  mu4e-maildir-shortcuts
	  '(("/lxg00n-paranoid/Inbox"	   . ?i)
		("/lxg00n-paranoid/Sent Items" . ?s)
		("/lxg00n-paranoid/Drafts"	   . ?d)
		("/lxg00n-paranoid/Trash"	   . ?t)))
#+end_src
